export class FileValidators {
    static maxFileSize(maxBytes, customMessage) {
        return (control) => {
            if (!!control && !!control.value) {
                if (control.value instanceof Array) {
                    const overSizedFiles = control.value.filter((x) => x.size > maxBytes);
                    // console.log('over size files',overSizedFiles)
                    // console.log('maxBytes',maxBytes, control.value.map((x:File)=>x.size))
                    if (overSizedFiles.length > 0)
                        return { maxFileSize: { maxFileSize: maxBytes, actualSize: overSizedFiles.map(x => x.size), files: overSizedFiles, customMessage } };
                }
                else if (control.value instanceof File && control.value.size > maxBytes)
                    return { maxFileSize: { maxFileSize: maxBytes, actualSize: control.value.size, files: control.value, customMessage } };
            }
            return null;
        };
    }
    static acceptedFileTypes(fileTypes, customMessage) {
        return (control) => {
            if (!!control && !!control.value) {
                if (control.value instanceof Array) {
                    const wrongTypeFiles = control.value.filter((x) => !fileTypes.some(t => x.type.match(t)));
                    if (!!wrongTypeFiles)
                        return { acceptedFileTypes: { acceptedFileTypes: fileTypes, actualTypes: wrongTypeFiles.map(x => x.type), files: wrongTypeFiles, customMessage } };
                }
                else if (control.value instanceof File && !fileTypes.some(t => control.value.type.match(t)))
                    return { acceptedFileTypes: { acceptedFileTypes: fileTypes, actualTypes: control.value.type, files: control.value, customMessage } };
            }
            return null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29udHJvbHMvc3JjL2xpYi92YWxpZGF0aW9ucy9maWxlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGNBQWM7SUFFekIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFnQixFQUFFLGFBQXNCO1FBQ3pELE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFlBQVksS0FBSyxFQUFFO29CQUNsQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQztvQkFDdEYsZ0RBQWdEO29CQUNoRCx3RUFBd0U7b0JBQ3hFLElBQUksY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDO3dCQUMzQixPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUM7aUJBQ3hJO3FCQUFNLElBQUksT0FBTyxDQUFDLEtBQUssWUFBWSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsUUFBUTtvQkFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUM7YUFDMUg7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQTtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsU0FBbUIsRUFBRSxhQUFzQjtRQUNsRSxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxZQUFZLEtBQUssRUFBRTtvQkFDbEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVcsQ0FBQztvQkFDMUcsSUFBSSxDQUFDLENBQUMsY0FBYzt3QkFDbEIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQztpQkFDdEo7cUJBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQzthQUN4STtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3JGbiB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZVZhbGlkYXRvcnMge1xyXG5cclxuICBzdGF0aWMgbWF4RmlsZVNpemUobWF4Qnl0ZXM6IG51bWJlciwgY3VzdG9tTWVzc2FnZT86IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XHJcbiAgICAgIGlmICghIWNvbnRyb2wgJiYgISFjb250cm9sLnZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wudmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgY29uc3Qgb3ZlclNpemVkRmlsZXMgPSBjb250cm9sLnZhbHVlLmZpbHRlcigoeDogRmlsZSkgPT4geC5zaXplID4gbWF4Qnl0ZXMpIGFzIEZpbGVbXTtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvdmVyIHNpemUgZmlsZXMnLG92ZXJTaXplZEZpbGVzKVxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ21heEJ5dGVzJyxtYXhCeXRlcywgY29udHJvbC52YWx1ZS5tYXAoKHg6RmlsZSk9Pnguc2l6ZSkpXHJcbiAgICAgICAgICBpZiAob3ZlclNpemVkRmlsZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHsgbWF4RmlsZVNpemU6IHsgbWF4RmlsZVNpemU6IG1heEJ5dGVzLCBhY3R1YWxTaXplOiBvdmVyU2l6ZWRGaWxlcy5tYXAoeCA9PiB4LnNpemUpLCBmaWxlczogb3ZlclNpemVkRmlsZXMsIGN1c3RvbU1lc3NhZ2UgfSB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC52YWx1ZSBpbnN0YW5jZW9mIEZpbGUgJiYgY29udHJvbC52YWx1ZS5zaXplID4gbWF4Qnl0ZXMpXHJcbiAgICAgICAgICByZXR1cm4geyBtYXhGaWxlU2l6ZTogeyBtYXhGaWxlU2l6ZTogbWF4Qnl0ZXMsIGFjdHVhbFNpemU6IGNvbnRyb2wudmFsdWUuc2l6ZSwgZmlsZXM6IGNvbnRyb2wudmFsdWUsIGN1c3RvbU1lc3NhZ2UgfSB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBzdGF0aWMgYWNjZXB0ZWRGaWxlVHlwZXMoZmlsZVR5cGVzOiBzdHJpbmdbXSwgY3VzdG9tTWVzc2FnZT86IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XHJcbiAgICAgIGlmICghIWNvbnRyb2wgJiYgISFjb250cm9sLnZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wudmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgY29uc3Qgd3JvbmdUeXBlRmlsZXMgPSBjb250cm9sLnZhbHVlLmZpbHRlcigoeDogRmlsZSkgPT4gIWZpbGVUeXBlcy5zb21lKHQgPT4geC50eXBlLm1hdGNoKHQpKSkgYXMgRmlsZVtdO1xyXG4gICAgICAgICAgaWYgKCEhd3JvbmdUeXBlRmlsZXMpXHJcbiAgICAgICAgICAgIHJldHVybiB7IGFjY2VwdGVkRmlsZVR5cGVzOiB7IGFjY2VwdGVkRmlsZVR5cGVzOiBmaWxlVHlwZXMsIGFjdHVhbFR5cGVzOiB3cm9uZ1R5cGVGaWxlcy5tYXAoeCA9PiB4LnR5cGUpLCBmaWxlczogd3JvbmdUeXBlRmlsZXMsIGN1c3RvbU1lc3NhZ2UgfSB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbC52YWx1ZSBpbnN0YW5jZW9mIEZpbGUgJiYgIWZpbGVUeXBlcy5zb21lKHQgPT4gY29udHJvbC52YWx1ZS50eXBlLm1hdGNoKHQpKSlcclxuICAgICAgICAgIHJldHVybiB7IGFjY2VwdGVkRmlsZVR5cGVzOiB7IGFjY2VwdGVkRmlsZVR5cGVzOiBmaWxlVHlwZXMsIGFjdHVhbFR5cGVzOiBjb250cm9sLnZhbHVlLnR5cGUsIGZpbGVzOiBjb250cm9sLnZhbHVlLCBjdXN0b21NZXNzYWdlIH0gfTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==