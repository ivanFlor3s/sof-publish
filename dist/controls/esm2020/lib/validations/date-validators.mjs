export class DateTimeValidators {
    static maxDate(max, customMessage) {
        return (control) => {
            if (!!control.value && control.value > max)
                return { maxDate: { maxDate: max, customMessage } };
            return null;
        };
    }
    static minDate(min, customMessage) {
        return (control) => {
            if (!!control.value && control.value < min)
                return { minDate: { minDate: min, customMessage } };
            return null;
        };
    }
    static afterOrEqualTo(formFieldName, customMessage) {
        return (control) => {
            const formField = control?.parent?.get(formFieldName);
            if (!!formField && !!formField.value && !!DateTimeValidators.minDate(formField.value)(control))
                return { afterOrEqualTo: { minDate: formField.value, customMessage } };
            return null;
        };
    }
    static beforeOrEqualTo(formFieldName, customMessage) {
        return (control) => {
            const formField = control?.parent?.get(formFieldName);
            if (!!formField && !!formField.value && !!DateTimeValidators.maxDate(formField.value)(control))
                return { beforeOrEqualTo: { maxDate: formField.value, customMessage } };
            return null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29udHJvbHMvc3JjL2xpYi92YWxpZGF0aW9ucy9kYXRlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQWEsRUFBRSxhQUFzQjtRQUNsRCxPQUFPLENBQUMsT0FBd0IsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHO2dCQUN4QyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDO1lBQ3RELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBYSxFQUFFLGFBQXNCO1FBQ2xELE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUc7Z0JBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDdEQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxhQUFxQixFQUFFLGFBQXNCO1FBQ2pFLE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDNUYsT0FBTyxFQUFFLGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDekUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFxQixFQUFFLGFBQXNCO1FBQ2xFLE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDNUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDMUUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUE7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvckZuLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tIFwibHV4b25cIlxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVUaW1lVmFsaWRhdG9ycyB7XHJcblxyXG4gIHN0YXRpYyBtYXhEYXRlKG1heDogRGF0ZVRpbWUsIGN1c3RvbU1lc3NhZ2U/OiBzdHJpbmcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xyXG4gICAgICBpZiAoISFjb250cm9sLnZhbHVlICYmIGNvbnRyb2wudmFsdWUgPiBtYXgpXHJcbiAgICAgICAgcmV0dXJuIHsgbWF4RGF0ZTogeyBtYXhEYXRlOiBtYXgsIGN1c3RvbU1lc3NhZ2UgfSB9OyBcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWluRGF0ZShtaW46IERhdGVUaW1lLCBjdXN0b21NZXNzYWdlPzogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgaWYgKCEhY29udHJvbC52YWx1ZSAmJiBjb250cm9sLnZhbHVlIDwgbWluKVxyXG4gICAgICAgIHJldHVybiB7IG1pbkRhdGU6IHsgbWluRGF0ZTogbWluLCBjdXN0b21NZXNzYWdlIH0gfTsgXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFmdGVyT3JFcXVhbFRvKGZvcm1GaWVsZE5hbWU6IHN0cmluZywgY3VzdG9tTWVzc2FnZT86IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvcm1GaWVsZCA9IGNvbnRyb2w/LnBhcmVudD8uZ2V0KGZvcm1GaWVsZE5hbWUpO1xyXG4gICAgICBpZiAoISFmb3JtRmllbGQgJiYgISFmb3JtRmllbGQudmFsdWUgJiYgISFEYXRlVGltZVZhbGlkYXRvcnMubWluRGF0ZShmb3JtRmllbGQudmFsdWUpKGNvbnRyb2wpKVxyXG4gICAgICAgIHJldHVybiB7IGFmdGVyT3JFcXVhbFRvOiB7IG1pbkRhdGU6IGZvcm1GaWVsZC52YWx1ZSwgY3VzdG9tTWVzc2FnZSB9IH07IFxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBiZWZvcmVPckVxdWFsVG8oZm9ybUZpZWxkTmFtZTogc3RyaW5nLCBjdXN0b21NZXNzYWdlPzogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgY29uc3QgZm9ybUZpZWxkID0gY29udHJvbD8ucGFyZW50Py5nZXQoZm9ybUZpZWxkTmFtZSk7XHJcbiAgICAgIGlmICghIWZvcm1GaWVsZCAmJiAhIWZvcm1GaWVsZC52YWx1ZSAmJiAhIURhdGVUaW1lVmFsaWRhdG9ycy5tYXhEYXRlKGZvcm1GaWVsZC52YWx1ZSkoY29udHJvbCkpXHJcbiAgICAgICAgcmV0dXJuIHsgYmVmb3JlT3JFcXVhbFRvOiB7IG1heERhdGU6IGZvcm1GaWVsZC52YWx1ZSwgY3VzdG9tTWVzc2FnZSB9IH07IFxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19