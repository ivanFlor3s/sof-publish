import { Component, Input, ViewChild } from '@angular/core';
import { FileUploadControlComponent } from '../../base/file-upload-control/file-upload-control.component';
import { FileInput } from 'ngx-material-file-input';
import { ValidationTypes } from '../../validations';
import { ErrorMaterialComponent } from '../error/error.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/form-field";
import * as i2 from "@angular/material/icon";
import * as i3 from "ngx-material-file-input";
import * as i4 from "@angular/material/chips";
import * as i5 from "../error/error.component";
import * as i6 from "@angular/common";
export class FileUploadMaterialControlComponent extends FileUploadControlComponent {
    ngOnInit() {
        document.querySelectorAll('ngx-mat-file-input[data-selector="mat-input-file"] input[type="file"]').forEach(e => e.addEventListener('focus', e => {
            document.getElementById('mat-input-file')?.classList.remove('cdk-focused', 'cdk-keyboard-focused', 'mat-form-field-should-float');
            this.Field._changeDetectorRef._cdRefInjectingView[0]?.classList.remove('mat-form-field-should-float');
            this.Field._changeDetectorRef._cdRefInjectingView[0]?.classList.add('mat-form-field-hide-placeholder');
        }));
    }
    onInput(value) {
        value = this.normalizeValue(value);
        this.changeValue(value);
        if (this.multiple && value.length > 0) {
            this.Field._changeDetectorRef._cdRefInjectingView[0].style.display = 'none';
        }
        else if (value && !this.multiple) {
            this.Field._changeDetectorRef._cdRefInjectingView[0].style.display = 'none';
        }
    }
    getMaxSizeValueInValidation(validations) {
        if (validations) {
            return validations.find(x => x.type == ValidationTypes.MaxFileSize)?.value;
        }
        else
            return 0;
    }
    getFileInputFromValue() {
        if (this.value instanceof File)
            return new FileInput([this.value]);
        else
            return new FileInput(this.value);
    }
    getFilesName() {
        const files = this.getFileInputFromValue();
        return files.fileNames ? files.fileNames.split(',') : [];
    }
    deleteItem(key) {
        if (this.multiple) {
            this.value = this.value.filter((f) => f.name != key);
        }
        else {
            this.value = null;
        }
        if (!this.value || this.value.length < 1) {
            this.Field._changeDetectorRef._cdRefInjectingView[0].style.display = 'inline-block';
        }
    }
}
FileUploadMaterialControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FileUploadMaterialControlComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
FileUploadMaterialControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: FileUploadMaterialControlComponent, selector: "sof-file-upload-control", inputs: { maxSize: "maxSize" }, viewQueries: [{ propertyName: "Field", first: true, predicate: ["field"], descendants: true }, { propertyName: "errorControl", first: true, predicate: ErrorMaterialComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<mat-form-field  appearance=\"outline\" #field >\r\n  <mat-label [ngClass]=\"{\r\n    'required-label': isRequired,\r\n    'text-error': EsInvalido\r\n  }\">\r\n  <mat-icon matSuffix>attachment</mat-icon>\r\n  {{ label }}\r\n  </mat-label>\r\n\r\n  <ngx-mat-file-input \r\n    data-selector=\"mat-input-file\"\r\n    matInput\r\n    class=\"form-control\"\r\n    [disabled]=\"disabled\"\r\n    type=\"file\"\r\n    [multiple]=\"!!multiple\"\r\n    [value]=\"getFileInputFromValue()\"\r\n    [accept]=\"accept\"\r\n    (change)=\"onInput( !!multiple ? $any($event.target).files : $any($event.target).files[0] )\">\r\n  </ngx-mat-file-input>\r\n\r\n  \r\n</mat-form-field>\r\n\r\n<div  *ngIf=\"getFilesName().length > 0\" class=\"row\">\r\n  <div>\r\n    <mat-chip-list *ngFor=\"let file of getFilesName()\">\r\n      <mat-chip >\r\n        {{ file }}\r\n        <button matChipRemove (click)=\"deleteItem(file)\">\r\n          <mat-icon>cancel</mat-icon>\r\n        </button>\r\n      </mat-chip>\r\n    </mat-chip-list>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<sof-error [controlInvalido]=\"EsInvalido\" [label]=\"label\" [errors]=\"errors\"></sof-error>\r\n", styles: [":host{display:flex;flex-direction:column}:host mat-label{display:flex;justify-content:center;align-items:center;font-size:1rem}:host mat-label.active-label{color:#673ab7}:host mat-label.text-error{color:red}:host mat-label.required-label:after{content:\"*\";color:red}:host mat-form-field.error-field div div div.mat-form-field-outline{color:red}:host mat-icon{transform:rotate(270deg);font-size:1.5em;margin-right:.5em}:host .row{width:100%}\n"], components: [{ type: i1.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i3.FileInputComponent, selector: "ngx-mat-file-input", inputs: ["autofilled", "valuePlaceholder", "accept", "errorStateMatcher", "value", "multiple", "placeholder", "required", "disabled"] }, { type: i4.MatChipList, selector: "mat-chip-list", inputs: ["errorStateMatcher", "multiple", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["matChipList"] }, { type: i5.ErrorMaterialComponent, selector: "sof-error" }], directives: [{ type: i1.MatLabel, selector: "mat-label" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.MatSuffix, selector: "[matSuffix]" }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disableRipple", "tabIndex", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"], exportAs: ["matChip"] }, { type: i4.MatChipRemove, selector: "[matChipRemove]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FileUploadMaterialControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sof-file-upload-control', template: "<mat-form-field  appearance=\"outline\" #field >\r\n  <mat-label [ngClass]=\"{\r\n    'required-label': isRequired,\r\n    'text-error': EsInvalido\r\n  }\">\r\n  <mat-icon matSuffix>attachment</mat-icon>\r\n  {{ label }}\r\n  </mat-label>\r\n\r\n  <ngx-mat-file-input \r\n    data-selector=\"mat-input-file\"\r\n    matInput\r\n    class=\"form-control\"\r\n    [disabled]=\"disabled\"\r\n    type=\"file\"\r\n    [multiple]=\"!!multiple\"\r\n    [value]=\"getFileInputFromValue()\"\r\n    [accept]=\"accept\"\r\n    (change)=\"onInput( !!multiple ? $any($event.target).files : $any($event.target).files[0] )\">\r\n  </ngx-mat-file-input>\r\n\r\n  \r\n</mat-form-field>\r\n\r\n<div  *ngIf=\"getFilesName().length > 0\" class=\"row\">\r\n  <div>\r\n    <mat-chip-list *ngFor=\"let file of getFilesName()\">\r\n      <mat-chip >\r\n        {{ file }}\r\n        <button matChipRemove (click)=\"deleteItem(file)\">\r\n          <mat-icon>cancel</mat-icon>\r\n        </button>\r\n      </mat-chip>\r\n    </mat-chip-list>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<sof-error [controlInvalido]=\"EsInvalido\" [label]=\"label\" [errors]=\"errors\"></sof-error>\r\n", styles: [":host{display:flex;flex-direction:column}:host mat-label{display:flex;justify-content:center;align-items:center;font-size:1rem}:host mat-label.active-label{color:#673ab7}:host mat-label.text-error{color:red}:host mat-label.required-label:after{content:\"*\";color:red}:host mat-form-field.error-field div div div.mat-form-field-outline{color:red}:host mat-icon{transform:rotate(270deg);font-size:1.5em;margin-right:.5em}:host .row{width:100%}\n"] }]
        }], propDecorators: { maxSize: [{
                type: Input
            }], Field: [{
                type: ViewChild,
                args: ['field', { static: false }]
            }], errorControl: [{
                type: ViewChild,
                args: [ErrorMaterialComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,