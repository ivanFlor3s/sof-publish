import { Component, Input, ViewChild } from '@angular/core';
import { AutocompleteMaterialControlComponent } from 'sof-ng-controls';
import { I18nOptions } from '../../shared/models/options';
import * as i0 from "@angular/core";
import * as i1 from "sof-ng-controls";
import * as i2 from "@angular/forms";
import * as i3 from "@ngx-translate/core";
export class I18nAutocompleteComponent extends I18nOptions {
    constructor() {
        super(...arguments);
        /**
         * Delay para filtrar
         **/
        this.debounce = 300;
    }
    ngAfterViewInit() {
        this.control.errorControl.translateFuncion = (param) => {
            return this.pipeTranslate.transform(param);
        };
        if (!this.filterFn && !this.filterEndPoint)
            this._srvTranslatePipe.onLangChange.subscribe(() => {
                this.showOptions();
            });
    }
}
I18nAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: I18nAutocompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
I18nAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: I18nAutocompleteComponent, selector: "app-i18n-autocomplete-control", inputs: { debounce: "debounce", filterFn: "filterFn", filterEndPoint: "filterEndPoint" }, viewQueries: [{ propertyName: "control", first: true, predicate: AutocompleteMaterialControlComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [formGroup]=\"getFbGroup()\">\r\n  <sof-autocomplete-control\r\n    label=\"{{labelToTranslate | translate }}\"\r\n    placeholder=\"{{placeholderToTranslate | translate}}\"\r\n    [textPath]=\"textPath\"\r\n    [valuePath]=\"valuePath\"\r\n    [formControlName]=\"controlDir.name\"\r\n    [list]=\"listFinal\"\r\n    [maxLength]=\"maxLength\"\r\n    [noLabel]=\"noLabel\"\r\n    [sideLabel]=\"sideLabel\"\r\n    [readOnly]=\"readOnly\"\r\n    [debounce]=\"debounce\"\r\n    [filterFn]=\"filterFn\"\r\n    [filterEndPoint]=\"filterEndPoint\"\r\n  >\r\n  </sof-autocomplete-control>\r\n</ng-container>\r\n", components: [{ type: i1.AutocompleteMaterialControlComponent, selector: "sof-autocomplete-control" }], directives: [{ type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "translate": i3.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: I18nAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-i18n-autocomplete-control', template: "<ng-container [formGroup]=\"getFbGroup()\">\r\n  <sof-autocomplete-control\r\n    label=\"{{labelToTranslate | translate }}\"\r\n    placeholder=\"{{placeholderToTranslate | translate}}\"\r\n    [textPath]=\"textPath\"\r\n    [valuePath]=\"valuePath\"\r\n    [formControlName]=\"controlDir.name\"\r\n    [list]=\"listFinal\"\r\n    [maxLength]=\"maxLength\"\r\n    [noLabel]=\"noLabel\"\r\n    [sideLabel]=\"sideLabel\"\r\n    [readOnly]=\"readOnly\"\r\n    [debounce]=\"debounce\"\r\n    [filterFn]=\"filterFn\"\r\n    [filterEndPoint]=\"filterEndPoint\"\r\n  >\r\n  </sof-autocomplete-control>\r\n</ng-container>\r\n" }]
        }], propDecorators: { debounce: [{
                type: Input
            }], filterFn: [{
                type: Input
            }], filterEndPoint: [{
                type: Input
            }], control: [{
                type: ViewChild,
                args: [AutocompleteMaterialControlComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1hdXRvY29tcGxldGUtY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pMThuLWNvbnRyb2xzL3NyYy9saWIvaTE4bi13cmFwcGVyLWNvbnRyb2xzL2kxOG4tYXV0b2NvbXBsZXRlLWNvbnRyb2wvaTE4bi1hdXRvY29tcGxldGUtY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pMThuLWNvbnRyb2xzL3NyYy9saWIvaTE4bi13cmFwcGVyLWNvbnRyb2xzL2kxOG4tYXV0b2NvbXBsZXRlLWNvbnRyb2wvaTE4bi1hdXRvY29tcGxldGUtY29udHJvbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7QUFNMUQsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFdBQVc7SUFKMUQ7O1FBTUU7O1lBRUk7UUFDSyxhQUFRLEdBQVcsR0FBRyxDQUFDO0tBMEJqQztJQVhDLGVBQWU7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYztZQUN4QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBRSxHQUFHLEVBQUU7Z0JBQ2xELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O3NIQTdCVSx5QkFBeUI7MEdBQXpCLHlCQUF5Qix3TUFpQnpCLG9DQUFvQyx1RUN6QmpELDRtQkFrQkE7MkZEVmEseUJBQXlCO2tCQUpyQyxTQUFTOytCQUNFLCtCQUErQjs4QkFRaEMsUUFBUTtzQkFBaEIsS0FBSztnQkFLRyxRQUFRO3NCQUFoQixLQUFLO2dCQUtHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBR04sT0FBTztzQkFETixTQUFTO3VCQUFDLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVNYXRlcmlhbENvbnRyb2xDb21wb25lbnQgfSBmcm9tICdzb2YtbmctY29udHJvbHMnO1xyXG5pbXBvcnQgeyBJMThuT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NoYXJlZC9tb2RlbHMvb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1pMThuLWF1dG9jb21wbGV0ZS1jb250cm9sJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vaTE4bi1hdXRvY29tcGxldGUtY29udHJvbC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEkxOG5BdXRvY29tcGxldGVDb21wb25lbnQgZXh0ZW5kcyBJMThuT3B0aW9ucyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIERlbGF5IHBhcmEgZmlsdHJhclxyXG4gICAqKi8gXHJcbiAgQElucHV0KCkgZGVib3VuY2U6IG51bWJlciA9IDMwMDtcclxuXHJcbiAgLyoqXHJcbiAgICogQnVzcXVlZGEgdXNhZG8gdW5hIGZ1bmNpb24gZGVmaW5pZGEgZW4gZWwgY29tcG9uZW50ZVxyXG4gICAqKi8gXHJcbiAgQElucHV0KCkgZmlsdGVyRm4hOiAoZmlsdGVyVGV4dDogc3RyaW5nKSA9PiBhbnlbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQnVzcXVlZGEgdXNhbmRvIHVuIGVuZHBvaW50XHJcbiAgICoqLyBcclxuICBASW5wdXQoKSBmaWx0ZXJFbmRQb2ludCE6IHN0cmluZztcclxuXHJcbiAgQFZpZXdDaGlsZChBdXRvY29tcGxldGVNYXRlcmlhbENvbnRyb2xDb21wb25lbnQpXHJcbiAgY29udHJvbCE6IEF1dG9jb21wbGV0ZU1hdGVyaWFsQ29udHJvbENvbXBvbmVudDtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250cm9sLmVycm9yQ29udHJvbC50cmFuc2xhdGVGdW5jaW9uID0gKHBhcmFtOiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMucGlwZVRyYW5zbGF0ZS50cmFuc2Zvcm0ocGFyYW0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZmlsdGVyRm4gJiYgIXRoaXMuZmlsdGVyRW5kUG9pbnQpXHJcbiAgICAgIHRoaXMuX3NydlRyYW5zbGF0ZVBpcGUub25MYW5nQ2hhbmdlLnN1YnNjcmliZSggKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2hvd09wdGlvbnMoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCI8bmctY29udGFpbmVyIFtmb3JtR3JvdXBdPVwiZ2V0RmJHcm91cCgpXCI+XHJcbiAgPHNvZi1hdXRvY29tcGxldGUtY29udHJvbFxyXG4gICAgbGFiZWw9XCJ7e2xhYmVsVG9UcmFuc2xhdGUgfCB0cmFuc2xhdGUgfX1cIlxyXG4gICAgcGxhY2Vob2xkZXI9XCJ7e3BsYWNlaG9sZGVyVG9UcmFuc2xhdGUgfCB0cmFuc2xhdGV9fVwiXHJcbiAgICBbdGV4dFBhdGhdPVwidGV4dFBhdGhcIlxyXG4gICAgW3ZhbHVlUGF0aF09XCJ2YWx1ZVBhdGhcIlxyXG4gICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb250cm9sRGlyLm5hbWVcIlxyXG4gICAgW2xpc3RdPVwibGlzdEZpbmFsXCJcclxuICAgIFttYXhMZW5ndGhdPVwibWF4TGVuZ3RoXCJcclxuICAgIFtub0xhYmVsXT1cIm5vTGFiZWxcIlxyXG4gICAgW3NpZGVMYWJlbF09XCJzaWRlTGFiZWxcIlxyXG4gICAgW3JlYWRPbmx5XT1cInJlYWRPbmx5XCJcclxuICAgIFtkZWJvdW5jZV09XCJkZWJvdW5jZVwiXHJcbiAgICBbZmlsdGVyRm5dPVwiZmlsdGVyRm5cIlxyXG4gICAgW2ZpbHRlckVuZFBvaW50XT1cImZpbHRlckVuZFBvaW50XCJcclxuICA+XHJcbiAgPC9zb2YtYXV0b2NvbXBsZXRlLWNvbnRyb2w+XHJcbjwvbmctY29udGFpbmVyPlxyXG4iXX0=