export class FileValidators {
    static maxFileSize(maxBytes, customMessage) {
        return (control) => {
            if (!!control && !!control.value) {
                if (control.value instanceof Array) {
                    const overSizedFiles = control.value.filter((x) => x.size > maxBytes);
                    console.log('over size files', overSizedFiles);
                    console.log('maxBytes', maxBytes, control.value.map((x) => x.size));
                    if (overSizedFiles.length > 0)
                        return { maxFileSize: { maxFileSize: maxBytes, actualSize: overSizedFiles.map(x => x.size), files: overSizedFiles, customMessage } };
                }
                else if (control.value instanceof File && control.value.size > maxBytes)
                    return { maxFileSize: { maxFileSize: maxBytes, actualSize: control.value.size, files: control.value, customMessage } };
            }
            return null;
        };
    }
    static acceptedFileTypes(fileTypes, customMessage) {
        return (control) => {
            if (!!control && !!control.value) {
                if (control.value instanceof Array) {
                    const wrongTypeFiles = control.value.filter((x) => !fileTypes.some(t => x.type.match(t)));
                    if (!!wrongTypeFiles)
                        return { acceptedFileTypes: { acceptedFileTypes: fileTypes, actualTypes: wrongTypeFiles.map(x => x.type), files: wrongTypeFiles, customMessage } };
                }
                else if (control.value instanceof File && !fileTypes.some(t => control.value.type.match(t)))
                    return { acceptedFileTypes: { acceptedFileTypes: fileTypes, actualTypes: control.value.type, files: control.value, customMessage } };
            }
            return null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29udHJvbHMvc3JjL2xpYi92YWxpZGF0aW9ucy9maWxlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGNBQWM7SUFFekIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFnQixFQUFFLGFBQXNCO1FBQ3pELE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFlBQVksS0FBSyxFQUFFO29CQUNsQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxRQUFRLENBQVcsQ0FBQztvQkFDdEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBQyxjQUFjLENBQUMsQ0FBQTtvQkFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtvQkFDckUsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUM7d0JBQzNCLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQztpQkFDeEk7cUJBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxZQUFZLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxRQUFRO29CQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQzthQUMxSDtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFtQixFQUFFLGFBQXNCO1FBQ2xFLE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFlBQVksS0FBSyxFQUFFO29CQUNsQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBVyxDQUFDO29CQUMxRyxJQUFJLENBQUMsQ0FBQyxjQUFjO3dCQUNsQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDO2lCQUN0SjtxQkFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFlBQVksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDO2FBQ3hJO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUE7SUFDSCxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvckZuIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlVmFsaWRhdG9ycyB7XHJcblxyXG4gIHN0YXRpYyBtYXhGaWxlU2l6ZShtYXhCeXRlczogbnVtYmVyLCBjdXN0b21NZXNzYWdlPzogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgaWYgKCEhY29udHJvbCAmJiAhIWNvbnRyb2wudmFsdWUpIHtcclxuICAgICAgICBpZiAoY29udHJvbC52YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICBjb25zdCBvdmVyU2l6ZWRGaWxlcyA9IGNvbnRyb2wudmFsdWUuZmlsdGVyKCh4OiBGaWxlKSA9PiB4LnNpemUgPiBtYXhCeXRlcykgYXMgRmlsZVtdO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ292ZXIgc2l6ZSBmaWxlcycsb3ZlclNpemVkRmlsZXMpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnbWF4Qnl0ZXMnLG1heEJ5dGVzLCBjb250cm9sLnZhbHVlLm1hcCgoeDpGaWxlKT0+eC5zaXplKSlcclxuICAgICAgICAgIGlmIChvdmVyU2l6ZWRGaWxlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICByZXR1cm4geyBtYXhGaWxlU2l6ZTogeyBtYXhGaWxlU2l6ZTogbWF4Qnl0ZXMsIGFjdHVhbFNpemU6IG92ZXJTaXplZEZpbGVzLm1hcCh4ID0+IHguc2l6ZSksIGZpbGVzOiBvdmVyU2l6ZWRGaWxlcywgY3VzdG9tTWVzc2FnZSB9IH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sLnZhbHVlIGluc3RhbmNlb2YgRmlsZSAmJiBjb250cm9sLnZhbHVlLnNpemUgPiBtYXhCeXRlcylcclxuICAgICAgICAgIHJldHVybiB7IG1heEZpbGVTaXplOiB7IG1heEZpbGVTaXplOiBtYXhCeXRlcywgYWN0dWFsU2l6ZTogY29udHJvbC52YWx1ZS5zaXplLCBmaWxlczogY29udHJvbC52YWx1ZSwgY3VzdG9tTWVzc2FnZSB9IH07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHN0YXRpYyBhY2NlcHRlZEZpbGVUeXBlcyhmaWxlVHlwZXM6IHN0cmluZ1tdLCBjdXN0b21NZXNzYWdlPzogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgaWYgKCEhY29udHJvbCAmJiAhIWNvbnRyb2wudmFsdWUpIHtcclxuICAgICAgICBpZiAoY29udHJvbC52YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICBjb25zdCB3cm9uZ1R5cGVGaWxlcyA9IGNvbnRyb2wudmFsdWUuZmlsdGVyKCh4OiBGaWxlKSA9PiAhZmlsZVR5cGVzLnNvbWUodCA9PiB4LnR5cGUubWF0Y2godCkpKSBhcyBGaWxlW107XHJcbiAgICAgICAgICBpZiAoISF3cm9uZ1R5cGVGaWxlcylcclxuICAgICAgICAgICAgcmV0dXJuIHsgYWNjZXB0ZWRGaWxlVHlwZXM6IHsgYWNjZXB0ZWRGaWxlVHlwZXM6IGZpbGVUeXBlcywgYWN0dWFsVHlwZXM6IHdyb25nVHlwZUZpbGVzLm1hcCh4ID0+IHgudHlwZSksIGZpbGVzOiB3cm9uZ1R5cGVGaWxlcywgY3VzdG9tTWVzc2FnZSB9IH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sLnZhbHVlIGluc3RhbmNlb2YgRmlsZSAmJiAhZmlsZVR5cGVzLnNvbWUodCA9PiBjb250cm9sLnZhbHVlLnR5cGUubWF0Y2godCkpKVxyXG4gICAgICAgICAgcmV0dXJuIHsgYWNjZXB0ZWRGaWxlVHlwZXM6IHsgYWNjZXB0ZWRGaWxlVHlwZXM6IGZpbGVUeXBlcywgYWN0dWFsVHlwZXM6IGNvbnRyb2wudmFsdWUudHlwZSwgZmlsZXM6IGNvbnRyb2wudmFsdWUsIGN1c3RvbU1lc3NhZ2UgfSB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19