import { Validators } from "@angular/forms";
export class RequiredValidators {
    static required(customMessage) {
        return (control) => {
            if (!!Validators.required(control))
                return { required: { required: true, customMessage } };
            return null;
        };
    }
    static requiredTrue(customMessage) {
        return (control) => {
            if (!!Validators.requiredTrue(control))
                return { requiredTrue: { requiredTrue: true, customMessage } };
            return null;
        };
    }
    static requiredIfFieldIsEmpty(ifEmptyField, customMessage) {
        return (control) => {
            const emptyField = control.parent?.get(ifEmptyField);
            if (!!emptyField && !emptyField.value && !!Validators.required(control))
                return { requiredIfFieldIsEmpty: { requiredIfFieldIsEmpty: true, customMessage } };
            return null;
        };
    }
    static requiredIfFieldIsIn(formFieldName, values, customMessage) {
        return (control) => {
            const formField = control?.parent?.get(formFieldName);
            if (!!formField && values.find(x => x == formField.value) && !!Validators.required(control))
                return { requiredIfFieldIsIn: { values: values, customMessage } };
            return null;
        };
    }
    static requiredIfFieldIsNotEmpty(ifNotEmptyField, customMessage) {
        return (control) => {
            const emptyField = control.parent?.get(ifNotEmptyField);
            if (!!emptyField && !!emptyField.value && !!Validators.required(control))
                return { requiredIfFieldIsNotEmpty: { requiredIfFieldIsNotEmpty: true, customMessage } };
            return null;
        };
    }
    //https://medium.com/ngx/3-ways-to-implement-conditional-validation-of-reactive-forms-c59ed6fc3325
    static requiredIf(predicate, customMessage) {
        return (control) => {
            if (predicate() && !!Validators.required(control))
                return { requiredIf: { requiredIf: true, customMessage } };
            return null;
        };
    }
    static fieldRequiredIfFieldEmpty(requiredField, ifEmptyField, customMessage) {
        return (formGroup) => {
            const field = formGroup.get(requiredField);
            const emptyField = formGroup.get(ifEmptyField);
            if (!!field && !!emptyField)
                if (!field.value && !emptyField.value) {
                    let errors = field.errors;
                    if (!errors)
                        errors = {};
                    errors['fieldRequiredIfFieldEmpty'] = { fieldRequiredIfFieldEmpty: { fieldRequiredIfFieldEmpty: true, customMessage } };
                    field.setErrors(errors);
                }
                else {
                    let errors = field.errors;
                    if (!!errors && errors.hasOwnProperty('required')) {
                        delete errors['fieldRequiredIfFieldEmpty'];
                        field.setErrors(errors);
                    }
                }
            return null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,