import { Component, Inject, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { IconColorEnum } from '../../enums/icon-color.enum';
import { IconStyleEnum } from '../../enums/icon-style.enum';
import { IconEnum } from '../../enums/icon.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../../../lib/i18n-wrapper-controls/i18n-dynamic-form/i18n-dynamic-form.component";
import * as i4 from "@angular/common";
export class AlertComponent {
    constructor(dialogRef, data, translateService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.translateService = translateService;
        this.IconStyleEnum = IconStyleEnum;
        this.IconColorEnum = IconColorEnum;
        this.IconEnum = IconEnum;
        this.formConfigs = {
            formCustomClass: '',
            submitButtonConfig: {
                text: '',
                color: 'primary',
                hidden: true,
                materialButtonType: 'raised'
            }
        };
        this.config = data;
    }
    async ngOnInit() {
        if (!!this.config.width)
            this.dialogRef.updateSize(this.config.width);
        if (!!this.config.textParams)
            Object.keys(this.config.textParams).forEach(async (key) => this.config.textParams[key] = this.translateService.instant(this.config.textParams[key]));
        if (!!this.config.buttonsParams)
            Object.keys(this.config.buttonsParams).forEach(async (key) => this.config.buttonsParams[key] = this.translateService.instant(this.config.buttonsParams[key]));
    }
    onClick(type) {
        const values = !this.form ? undefined : this.form.forma.value;
        this.dialogRef.close({
            usedButton: type,
            values: values
        });
    }
}
AlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AlertComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
AlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: AlertComponent, selector: "app-alert", viewQueries: [{ propertyName: "form", first: true, predicate: ["form"], descendants: true }], ngImport: i0, template: "<span [class]=\"'icon material-icons' + (!!config.icon.style && config.icon.style != IconStyleEnum.filled ? ('-' + config.icon.style) : '')\"\r\n    [style.color]=\"config.icon.color ?? IconColorEnum.red\">\r\n    {{config.icon.icon}}\r\n</span>\r\n\r\n<span class=\"text\">\r\n    {{ config.text | translate:config.textParams }}\r\n</span>\r\n\r\n<div class=\"inputsForm\" *ngIf=\"!!config.inputsFormFields\">\r\n    <lib-i18n-dynamic-form \r\n    [formConfig]=\"formConfigs\" \r\n    [fields]=\"config.inputsFormFields\" \r\n    [rowHeight]=\"config.formRowsHeight ?? '40px'\"\r\n    gutterSize=\"1em\"\r\n    [cols]=\"3\"\r\n    #form\r\n    ></lib-i18n-dynamic-form>\r\n    <span>(<span class=\"red\">*</span>) {{\"LABELS.DATOS-OBLIGATORIOS\" | translate}}</span>\r\n</div>\r\n\r\n<div class=\"buttons\">\r\n\r\n    <button \r\n    *ngFor=\"let b of config.buttons\"\r\n    [ngClass]=\"{\r\n        'mat-button': b.type == 'basic',\r\n        'mat-raised-button': b.type == 'raised',\r\n        'mat-stroked-button': b.type == 'stroked',\r\n        'mat-flat-button': b.type == 'flat'\r\n    }\"\r\n    mat-button\r\n    color=\"primary\" \r\n    (click)=\"onClick(b.labelKey!)\" \r\n    >\r\n        {{ config.buttonsSkipToUppercase\r\n            ? (b.labelKey! | translate:config.buttonsParams)\r\n            : (b.labelKey! | translate:config.buttonsParams) | uppercase\r\n        }}\r\n    </button>\r\n\r\n</div>\r\n", styles: [":host{padding:20px 30px;display:flex;flex-direction:column;justify-items:center;gap:25px}:host>*{flex-grow:1;flex-shrink:1}:host>span{text-align:center;width:100%}:host>.icon{font-size:100px}:host>.text{font-size:25px;color:#000;white-space:pre-wrap}:host>.buttons{margin-top:10px;display:flex;flex-direction:row;gap:14px;justify-content:center}:host .red{color:red}:host>.inputsForm{display:flex;flex-direction:column;gap:10px}\n"], components: [{ type: i3.I18nDynamicFormComponent, selector: "lib-i18n-dynamic-form", inputs: ["cols", "gutterSize", "rowHeight", "fields", "FieldsValues", "formConfig"], outputs: ["submitEvent", "onChangeEvent"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i2.TranslatePipe, "uppercase": i4.UpperCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AlertComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-alert', template: "<span [class]=\"'icon material-icons' + (!!config.icon.style && config.icon.style != IconStyleEnum.filled ? ('-' + config.icon.style) : '')\"\r\n    [style.color]=\"config.icon.color ?? IconColorEnum.red\">\r\n    {{config.icon.icon}}\r\n</span>\r\n\r\n<span class=\"text\">\r\n    {{ config.text | translate:config.textParams }}\r\n</span>\r\n\r\n<div class=\"inputsForm\" *ngIf=\"!!config.inputsFormFields\">\r\n    <lib-i18n-dynamic-form \r\n    [formConfig]=\"formConfigs\" \r\n    [fields]=\"config.inputsFormFields\" \r\n    [rowHeight]=\"config.formRowsHeight ?? '40px'\"\r\n    gutterSize=\"1em\"\r\n    [cols]=\"3\"\r\n    #form\r\n    ></lib-i18n-dynamic-form>\r\n    <span>(<span class=\"red\">*</span>) {{\"LABELS.DATOS-OBLIGATORIOS\" | translate}}</span>\r\n</div>\r\n\r\n<div class=\"buttons\">\r\n\r\n    <button \r\n    *ngFor=\"let b of config.buttons\"\r\n    [ngClass]=\"{\r\n        'mat-button': b.type == 'basic',\r\n        'mat-raised-button': b.type == 'raised',\r\n        'mat-stroked-button': b.type == 'stroked',\r\n        'mat-flat-button': b.type == 'flat'\r\n    }\"\r\n    mat-button\r\n    color=\"primary\" \r\n    (click)=\"onClick(b.labelKey!)\" \r\n    >\r\n        {{ config.buttonsSkipToUppercase\r\n            ? (b.labelKey! | translate:config.buttonsParams)\r\n            : (b.labelKey! | translate:config.buttonsParams) | uppercase\r\n        }}\r\n    </button>\r\n\r\n</div>\r\n", styles: [":host{padding:20px 30px;display:flex;flex-direction:column;justify-items:center;gap:25px}:host>*{flex-grow:1;flex-shrink:1}:host>span{text-align:center;width:100%}:host>.icon{font-size:100px}:host>.text{font-size:25px;color:#000;white-space:pre-wrap}:host>.buttons{margin-top:10px;display:flex;flex-direction:row;gap:14px;justify-content:center}:host .red{color:red}:host>.inputsForm{display:flex;flex-direction:column;gap:10px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i2.TranslateService }]; }, propDecorators: { form: [{
                type: ViewChild,
                args: ['form', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi1jb250cm9scy9zcmMvc29mLWFsZXJ0L2NvbXBvbmVudHMvc29mLWFsZXJ0L2FsZXJ0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2kxOG4tY29udHJvbHMvc3JjL3NvZi1hbGVydC9jb21wb25lbnRzL3NvZi1hbGVydC9hbGVydC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUl6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7O0FBU2pELE1BQU0sT0FBTyxjQUFjO0lBb0J6QixZQUNVLFNBQXVDLEVBQ2YsSUFBaUIsRUFDekMsZ0JBQWtDO1FBRmxDLGNBQVMsR0FBVCxTQUFTLENBQThCO1FBQ2YsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUN6QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBbkI1QyxrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUM5QixrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUM5QixhQUFRLEdBQUcsUUFBUSxDQUFDO1FBR3BCLGdCQUFXLEdBQWU7WUFDeEIsZUFBZSxFQUFFLEVBQUU7WUFDbkIsa0JBQWtCLEVBQUM7Z0JBQ2pCLElBQUksRUFBQyxFQUFFO2dCQUNQLEtBQUssRUFBQyxTQUFTO2dCQUNmLE1BQU0sRUFBRSxJQUFJO2dCQUNaLGtCQUFrQixFQUFDLFFBQVE7YUFDNUI7U0FDRixDQUFBO1FBUUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1osSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckosSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhO1lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEssQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsVUFBVSxFQUFFLElBQUk7WUFDaEIsTUFBTSxFQUFFLE1BQU07U0FDQSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7MkdBN0NVLGNBQWMsOENBc0JmLGVBQWU7K0ZBdEJkLGNBQWMsK0lDaEIzQixvNUNBMENBOzJGRDFCYSxjQUFjO2tCQUwxQixTQUFTOytCQUNFLFdBQVc7OzBCQTBCbEIsTUFBTTsyQkFBQyxlQUFlOzJFQWRhLElBQUk7c0JBQXpDLFNBQVM7dUJBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXREaWFsb2dSZWYsIE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgSTE4bkR5bmFtaWNGb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbGliL2kxOG4td3JhcHBlci1jb250cm9scy9pMThuLWR5bmFtaWMtZm9ybS9pMThuLWR5bmFtaWMtZm9ybS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGb3JtQ29uZmlnIH0gZnJvbSAnc29mLW5nLWNvbnRyb2xzJztcclxuaW1wb3J0IHsgSWNvbkNvbG9yRW51bSB9IGZyb20gJy4uLy4uL2VudW1zL2ljb24tY29sb3IuZW51bSc7XHJcbmltcG9ydCB7IEljb25TdHlsZUVudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9pY29uLXN0eWxlLmVudW0nO1xyXG5pbXBvcnQgeyBJY29uRW51bSB9IGZyb20gJy4uLy4uL2VudW1zL2ljb24uZW51bSc7XHJcbmltcG9ydCB7IEFsZXJ0Q29uZmlnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9hbGVydC1jb25maWcuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgQWxlcnRSZXN1bHQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2FsZXJ0LXJlc3VsdC5pbnRlcmZhY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtYWxlcnQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hbGVydC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vYWxlcnQuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWxlcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBjb25maWc6IEFsZXJ0Q29uZmlnO1xyXG4gIFxyXG4gIEljb25TdHlsZUVudW0gPSBJY29uU3R5bGVFbnVtO1xyXG4gIEljb25Db2xvckVudW0gPSBJY29uQ29sb3JFbnVtO1xyXG4gIEljb25FbnVtID0gSWNvbkVudW07XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2Zvcm0nLCB7IHN0YXRpYzogZmFsc2UgfSkgZm9ybSE6IEkxOG5EeW5hbWljRm9ybUNvbXBvbmVudDtcclxuICBmb3JtQ29uZmlnczogRm9ybUNvbmZpZyA9IHtcclxuICAgIGZvcm1DdXN0b21DbGFzczogJycsXHJcbiAgICBzdWJtaXRCdXR0b25Db25maWc6e1xyXG4gICAgICB0ZXh0OicnLFxyXG4gICAgICBjb2xvcjoncHJpbWFyeScsXHJcbiAgICAgIGhpZGRlbjogdHJ1ZSxcclxuICAgICAgbWF0ZXJpYWxCdXR0b25UeXBlOidyYWlzZWQnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPEFsZXJ0Q29tcG9uZW50PixcclxuICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogQWxlcnRDb25maWcsXHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMuY29uZmlnID0gZGF0YTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG5nT25Jbml0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgaWYgKCEhdGhpcy5jb25maWcud2lkdGgpXHJcbiAgICAgIHRoaXMuZGlhbG9nUmVmLnVwZGF0ZVNpemUodGhpcy5jb25maWcud2lkdGgpO1xyXG4gICAgXHJcbiAgICBpZiAoISF0aGlzLmNvbmZpZy50ZXh0UGFyYW1zKVxyXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZy50ZXh0UGFyYW1zKS5mb3JFYWNoKGFzeW5jIGtleSA9PiB0aGlzLmNvbmZpZy50ZXh0UGFyYW1zW2tleV0gPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCh0aGlzLmNvbmZpZy50ZXh0UGFyYW1zW2tleV0pKTtcclxuICAgIFxyXG4gICAgaWYgKCEhdGhpcy5jb25maWcuYnV0dG9uc1BhcmFtcylcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5jb25maWcuYnV0dG9uc1BhcmFtcykuZm9yRWFjaChhc3luYyBrZXkgPT4gdGhpcy5jb25maWcuYnV0dG9uc1BhcmFtc1trZXldID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQodGhpcy5jb25maWcuYnV0dG9uc1BhcmFtc1trZXldKSk7XHJcbiAgfVxyXG5cclxuICBvbkNsaWNrKHR5cGU6IHN0cmluZykge1xyXG4gICAgY29uc3QgdmFsdWVzID0gIXRoaXMuZm9ybSA/IHVuZGVmaW5lZCA6IHRoaXMuZm9ybS5mb3JtYS52YWx1ZTtcclxuICAgIHRoaXMuZGlhbG9nUmVmLmNsb3NlKHtcclxuICAgICAgdXNlZEJ1dHRvbjogdHlwZSxcclxuICAgICAgdmFsdWVzOiB2YWx1ZXNcclxuICAgIH0gYXMgQWxlcnRSZXN1bHQpO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiPHNwYW4gW2NsYXNzXT1cIidpY29uIG1hdGVyaWFsLWljb25zJyArICghIWNvbmZpZy5pY29uLnN0eWxlICYmIGNvbmZpZy5pY29uLnN0eWxlICE9IEljb25TdHlsZUVudW0uZmlsbGVkID8gKCctJyArIGNvbmZpZy5pY29uLnN0eWxlKSA6ICcnKVwiXHJcbiAgICBbc3R5bGUuY29sb3JdPVwiY29uZmlnLmljb24uY29sb3IgPz8gSWNvbkNvbG9yRW51bS5yZWRcIj5cclxuICAgIHt7Y29uZmlnLmljb24uaWNvbn19XHJcbjwvc3Bhbj5cclxuXHJcbjxzcGFuIGNsYXNzPVwidGV4dFwiPlxyXG4gICAge3sgY29uZmlnLnRleHQgfCB0cmFuc2xhdGU6Y29uZmlnLnRleHRQYXJhbXMgfX1cclxuPC9zcGFuPlxyXG5cclxuPGRpdiBjbGFzcz1cImlucHV0c0Zvcm1cIiAqbmdJZj1cIiEhY29uZmlnLmlucHV0c0Zvcm1GaWVsZHNcIj5cclxuICAgIDxsaWItaTE4bi1keW5hbWljLWZvcm0gXHJcbiAgICBbZm9ybUNvbmZpZ109XCJmb3JtQ29uZmlnc1wiIFxyXG4gICAgW2ZpZWxkc109XCJjb25maWcuaW5wdXRzRm9ybUZpZWxkc1wiIFxyXG4gICAgW3Jvd0hlaWdodF09XCJjb25maWcuZm9ybVJvd3NIZWlnaHQgPz8gJzQwcHgnXCJcclxuICAgIGd1dHRlclNpemU9XCIxZW1cIlxyXG4gICAgW2NvbHNdPVwiM1wiXHJcbiAgICAjZm9ybVxyXG4gICAgPjwvbGliLWkxOG4tZHluYW1pYy1mb3JtPlxyXG4gICAgPHNwYW4+KDxzcGFuIGNsYXNzPVwicmVkXCI+Kjwvc3Bhbj4pIHt7XCJMQUJFTFMuREFUT1MtT0JMSUdBVE9SSU9TXCIgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cclxuPC9kaXY+XHJcblxyXG48ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPlxyXG5cclxuICAgIDxidXR0b24gXHJcbiAgICAqbmdGb3I9XCJsZXQgYiBvZiBjb25maWcuYnV0dG9uc1wiXHJcbiAgICBbbmdDbGFzc109XCJ7XHJcbiAgICAgICAgJ21hdC1idXR0b24nOiBiLnR5cGUgPT0gJ2Jhc2ljJyxcclxuICAgICAgICAnbWF0LXJhaXNlZC1idXR0b24nOiBiLnR5cGUgPT0gJ3JhaXNlZCcsXHJcbiAgICAgICAgJ21hdC1zdHJva2VkLWJ1dHRvbic6IGIudHlwZSA9PSAnc3Ryb2tlZCcsXHJcbiAgICAgICAgJ21hdC1mbGF0LWJ1dHRvbic6IGIudHlwZSA9PSAnZmxhdCdcclxuICAgIH1cIlxyXG4gICAgbWF0LWJ1dHRvblxyXG4gICAgY29sb3I9XCJwcmltYXJ5XCIgXHJcbiAgICAoY2xpY2spPVwib25DbGljayhiLmxhYmVsS2V5ISlcIiBcclxuICAgID5cclxuICAgICAgICB7eyBjb25maWcuYnV0dG9uc1NraXBUb1VwcGVyY2FzZVxyXG4gICAgICAgICAgICA/IChiLmxhYmVsS2V5ISB8IHRyYW5zbGF0ZTpjb25maWcuYnV0dG9uc1BhcmFtcylcclxuICAgICAgICAgICAgOiAoYi5sYWJlbEtleSEgfCB0cmFuc2xhdGU6Y29uZmlnLmJ1dHRvbnNQYXJhbXMpIHwgdXBwZXJjYXNlXHJcbiAgICAgICAgfX1cclxuICAgIDwvYnV0dG9uPlxyXG5cclxuPC9kaXY+XHJcbiJdfQ==