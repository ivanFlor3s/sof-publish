import { Component, Inject, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { IconColorEnum } from '../../enums/icon-color.enum';
import { IconStyleEnum } from '../../enums/icon-style.enum';
import { IconEnum } from '../../enums/icon.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../../../lib/i18n-wrapper-controls/i18n-dynamic-form/i18n-dynamic-form.component";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/common";
export class AlertComponent {
    constructor(dialogRef, data, translateService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.translateService = translateService;
        this.IconStyleEnum = IconStyleEnum;
        this.IconColorEnum = IconColorEnum;
        this.IconEnum = IconEnum;
        this.formConfigs = {
            formCustomClass: '',
            submitButtonConfig: {
                text: '',
                color: 'primary',
                hidden: true,
                materialButtonType: 'raised'
            }
        };
        this.config = data;
    }
    async ngOnInit() {
        if (!!this.config.width)
            this.dialogRef.updateSize(this.config.width);
        if (!!this.config.textParams)
            Object.keys(this.config.textParams).forEach(async (key) => this.config.textParams[key] = this.translateService.instant(this.config.textParams[key]));
        if (!!this.config.buttonsParams)
            Object.keys(this.config.buttonsParams).forEach(async (key) => this.config.buttonsParams[key] = this.translateService.instant(this.config.buttonsParams[key]));
    }
    onClick(type) {
        const values = !this.form ? undefined : this.form.forma.value;
        this.dialogRef.close({
            usedButton: type,
            values: values
        });
    }
}
AlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AlertComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
AlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: AlertComponent, selector: "app-alert", viewQueries: [{ propertyName: "form", first: true, predicate: ["form"], descendants: true }], ngImport: i0, template: "<span [class]=\"'icon material-icons' + (!!config.icon.style && config.icon.style != IconStyleEnum.filled ? ('-' + config.icon.style) : '')\"\r\n    [style.color]=\"config.icon.color ?? IconColorEnum.red\">\r\n    {{config.icon.icon}}\r\n</span>\r\n\r\n<span class=\"text\">\r\n    {{ config.text | translate:config.textParams }}\r\n</span>\r\n\r\n<div class=\"inputsForm\" *ngIf=\"!!config.inputsFormFields\">\r\n    <lib-i18n-dynamic-form \r\n    [formConfig]=\"formConfigs\" \r\n    [fields]=\"config.inputsFormFields\" \r\n    [rowHeight]=\"config.formRowsHeight ?? '40px'\"\r\n    gutterSize=\"1em\"\r\n    [cols]=\"3\"\r\n    #form\r\n    ></lib-i18n-dynamic-form>\r\n    <span>(<span class=\"red\">*</span>) {{\"LABELS.DATOS-OBLIGATORIOS\" | translate}}</span>\r\n</div>\r\n\r\n<div class=\"buttons\">\r\n\r\n    <button \r\n    *ngFor=\"let b of config.buttons\"\r\n    [ngClass]=\"{\r\n        'mat-button': b.type == 'basic',\r\n        'mat-raised-button': b.type == 'raised',\r\n        'mat-stroked-button': b.type == 'stroked',\r\n        'mat-flat-button': b.type == 'flat'\r\n    }\"\r\n    mat-button\r\n    color=\"primary\" \r\n    (click)=\"onClick(b.labelKey!)\" \r\n    >\r\n        {{ config.buttonsSkipToUppercase\r\n            ? (b.labelKey! | translate:config.buttonsParams)\r\n            : (b.labelKey! | translate:config.buttonsParams) | uppercase\r\n        }}\r\n    </button>\r\n\r\n</div>\r\n", styles: [":host{padding:20px 30px;display:flex;flex-direction:column;justify-items:center;gap:25px}:host>*{flex-grow:1;flex-shrink:1}:host>span{text-align:center;width:100%}:host>.icon{font-size:100px}:host>.text{font-size:25px;color:#000;white-space:pre-wrap}:host>.buttons{margin-top:10px;display:flex;flex-direction:row;gap:14px;justify-content:center}:host .red{color:red}:host>.inputsForm{display:flex;flex-direction:column;gap:10px}\n"], components: [{ type: i3.I18nDynamicFormComponent, selector: "lib-i18n-dynamic-form", inputs: ["cols", "gutterSize", "rowHeight", "fields", "FieldsValues", "formConfig"], outputs: ["submitEvent", "onChangeEvent"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i2.TranslatePipe, "uppercase": i5.UpperCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AlertComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-alert', template: "<span [class]=\"'icon material-icons' + (!!config.icon.style && config.icon.style != IconStyleEnum.filled ? ('-' + config.icon.style) : '')\"\r\n    [style.color]=\"config.icon.color ?? IconColorEnum.red\">\r\n    {{config.icon.icon}}\r\n</span>\r\n\r\n<span class=\"text\">\r\n    {{ config.text | translate:config.textParams }}\r\n</span>\r\n\r\n<div class=\"inputsForm\" *ngIf=\"!!config.inputsFormFields\">\r\n    <lib-i18n-dynamic-form \r\n    [formConfig]=\"formConfigs\" \r\n    [fields]=\"config.inputsFormFields\" \r\n    [rowHeight]=\"config.formRowsHeight ?? '40px'\"\r\n    gutterSize=\"1em\"\r\n    [cols]=\"3\"\r\n    #form\r\n    ></lib-i18n-dynamic-form>\r\n    <span>(<span class=\"red\">*</span>) {{\"LABELS.DATOS-OBLIGATORIOS\" | translate}}</span>\r\n</div>\r\n\r\n<div class=\"buttons\">\r\n\r\n    <button \r\n    *ngFor=\"let b of config.buttons\"\r\n    [ngClass]=\"{\r\n        'mat-button': b.type == 'basic',\r\n        'mat-raised-button': b.type == 'raised',\r\n        'mat-stroked-button': b.type == 'stroked',\r\n        'mat-flat-button': b.type == 'flat'\r\n    }\"\r\n    mat-button\r\n    color=\"primary\" \r\n    (click)=\"onClick(b.labelKey!)\" \r\n    >\r\n        {{ config.buttonsSkipToUppercase\r\n            ? (b.labelKey! | translate:config.buttonsParams)\r\n            : (b.labelKey! | translate:config.buttonsParams) | uppercase\r\n        }}\r\n    </button>\r\n\r\n</div>\r\n", styles: [":host{padding:20px 30px;display:flex;flex-direction:column;justify-items:center;gap:25px}:host>*{flex-grow:1;flex-shrink:1}:host>span{text-align:center;width:100%}:host>.icon{font-size:100px}:host>.text{font-size:25px;color:#000;white-space:pre-wrap}:host>.buttons{margin-top:10px;display:flex;flex-direction:row;gap:14px;justify-content:center}:host .red{color:red}:host>.inputsForm{display:flex;flex-direction:column;gap:10px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i2.TranslateService }]; }, propDecorators: { form: [{
                type: ViewChild,
                args: ['form', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi1jb250cm9scy9zcmMvc29mLWFsZXJ0L2NvbXBvbmVudHMvc29mLWFsZXJ0L2FsZXJ0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2kxOG4tY29udHJvbHMvc3JjL3NvZi1hbGVydC9jb21wb25lbnRzL3NvZi1hbGVydC9hbGVydC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUl6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7OztBQVNqRCxNQUFNLE9BQU8sY0FBYztJQW9CekIsWUFDVSxTQUF1QyxFQUNmLElBQWlCLEVBQ3pDLGdCQUFrQztRQUZsQyxjQUFTLEdBQVQsU0FBUyxDQUE4QjtRQUNmLFNBQUksR0FBSixJQUFJLENBQWE7UUFDekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQW5CNUMsa0JBQWEsR0FBRyxhQUFhLENBQUM7UUFDOUIsa0JBQWEsR0FBRyxhQUFhLENBQUM7UUFDOUIsYUFBUSxHQUFHLFFBQVEsQ0FBQztRQUdwQixnQkFBVyxHQUFlO1lBQ3hCLGVBQWUsRUFBRSxFQUFFO1lBQ25CLGtCQUFrQixFQUFDO2dCQUNqQixJQUFJLEVBQUMsRUFBRTtnQkFDUCxLQUFLLEVBQUMsU0FBUztnQkFDZixNQUFNLEVBQUUsSUFBSTtnQkFDWixrQkFBa0IsRUFBQyxRQUFRO2FBQzVCO1NBQ0YsQ0FBQTtRQVFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztZQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXJKLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTtZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hLLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBWTtRQUNsQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ25CLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1NBQ0EsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7OzJHQTdDVSxjQUFjLDhDQXNCZixlQUFlOytGQXRCZCxjQUFjLCtJQ2hCM0IsbzVDQTBDQTsyRkQxQmEsY0FBYztrQkFMMUIsU0FBUzsrQkFDRSxXQUFXOzswQkEwQmxCLE1BQU07MkJBQUMsZUFBZTsyRUFkYSxJQUFJO3NCQUF6QyxTQUFTO3VCQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0RGlhbG9nUmVmLCBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IEkxOG5EeW5hbWljRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2xpYi9pMThuLXdyYXBwZXItY29udHJvbHMvaTE4bi1keW5hbWljLWZvcm0vaTE4bi1keW5hbWljLWZvcm0uY29tcG9uZW50JztcclxuaW1wb3J0IHsgRm9ybUNvbmZpZyB9IGZyb20gJ3NvZi1uZy1jb250cm9scyc7XHJcbmltcG9ydCB7IEljb25Db2xvckVudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9pY29uLWNvbG9yLmVudW0nO1xyXG5pbXBvcnQgeyBJY29uU3R5bGVFbnVtIH0gZnJvbSAnLi4vLi4vZW51bXMvaWNvbi1zdHlsZS5lbnVtJztcclxuaW1wb3J0IHsgSWNvbkVudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9pY29uLmVudW0nO1xyXG5pbXBvcnQgeyBBbGVydENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvYWxlcnQtY29uZmlnLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEFsZXJ0UmVzdWx0IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9hbGVydC1yZXN1bHQuaW50ZXJmYWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWFsZXJ0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vYWxlcnQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2FsZXJ0LmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEFsZXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgY29uZmlnOiBBbGVydENvbmZpZztcclxuICBcclxuICBJY29uU3R5bGVFbnVtID0gSWNvblN0eWxlRW51bTtcclxuICBJY29uQ29sb3JFbnVtID0gSWNvbkNvbG9yRW51bTtcclxuICBJY29uRW51bSA9IEljb25FbnVtO1xyXG5cclxuICBAVmlld0NoaWxkKCdmb3JtJywgeyBzdGF0aWM6IGZhbHNlIH0pIGZvcm0hOiBJMThuRHluYW1pY0Zvcm1Db21wb25lbnQ7XHJcbiAgZm9ybUNvbmZpZ3M6IEZvcm1Db25maWcgPSB7XHJcbiAgICBmb3JtQ3VzdG9tQ2xhc3M6ICcnLFxyXG4gICAgc3VibWl0QnV0dG9uQ29uZmlnOntcclxuICAgICAgdGV4dDonJyxcclxuICAgICAgY29sb3I6J3ByaW1hcnknLFxyXG4gICAgICBoaWRkZW46IHRydWUsXHJcbiAgICAgIG1hdGVyaWFsQnV0dG9uVHlwZToncmFpc2VkJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBkaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxBbGVydENvbXBvbmVudD4sXHJcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IEFsZXJ0Q29uZmlnLFxyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IGRhdGE7XHJcbiAgfVxyXG5cclxuICBhc3luYyBuZ09uSW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGlmICghIXRoaXMuY29uZmlnLndpZHRoKVxyXG4gICAgICB0aGlzLmRpYWxvZ1JlZi51cGRhdGVTaXplKHRoaXMuY29uZmlnLndpZHRoKTtcclxuICAgIFxyXG4gICAgaWYgKCEhdGhpcy5jb25maWcudGV4dFBhcmFtcylcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5jb25maWcudGV4dFBhcmFtcykuZm9yRWFjaChhc3luYyBrZXkgPT4gdGhpcy5jb25maWcudGV4dFBhcmFtc1trZXldID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQodGhpcy5jb25maWcudGV4dFBhcmFtc1trZXldKSk7XHJcbiAgICBcclxuICAgIGlmICghIXRoaXMuY29uZmlnLmJ1dHRvbnNQYXJhbXMpXHJcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuY29uZmlnLmJ1dHRvbnNQYXJhbXMpLmZvckVhY2goYXN5bmMga2V5ID0+IHRoaXMuY29uZmlnLmJ1dHRvbnNQYXJhbXNba2V5XSA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KHRoaXMuY29uZmlnLmJ1dHRvbnNQYXJhbXNba2V5XSkpO1xyXG4gIH1cclxuXHJcbiAgb25DbGljayh0eXBlOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHZhbHVlcyA9ICF0aGlzLmZvcm0gPyB1bmRlZmluZWQgOiB0aGlzLmZvcm0uZm9ybWEudmFsdWU7XHJcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh7XHJcbiAgICAgIHVzZWRCdXR0b246IHR5cGUsXHJcbiAgICAgIHZhbHVlczogdmFsdWVzXHJcbiAgICB9IGFzIEFsZXJ0UmVzdWx0KTtcclxuICB9XHJcblxyXG59XHJcbiIsIjxzcGFuIFtjbGFzc109XCInaWNvbiBtYXRlcmlhbC1pY29ucycgKyAoISFjb25maWcuaWNvbi5zdHlsZSAmJiBjb25maWcuaWNvbi5zdHlsZSAhPSBJY29uU3R5bGVFbnVtLmZpbGxlZCA/ICgnLScgKyBjb25maWcuaWNvbi5zdHlsZSkgOiAnJylcIlxyXG4gICAgW3N0eWxlLmNvbG9yXT1cImNvbmZpZy5pY29uLmNvbG9yID8/IEljb25Db2xvckVudW0ucmVkXCI+XHJcbiAgICB7e2NvbmZpZy5pY29uLmljb259fVxyXG48L3NwYW4+XHJcblxyXG48c3BhbiBjbGFzcz1cInRleHRcIj5cclxuICAgIHt7IGNvbmZpZy50ZXh0IHwgdHJhbnNsYXRlOmNvbmZpZy50ZXh0UGFyYW1zIH19XHJcbjwvc3Bhbj5cclxuXHJcbjxkaXYgY2xhc3M9XCJpbnB1dHNGb3JtXCIgKm5nSWY9XCIhIWNvbmZpZy5pbnB1dHNGb3JtRmllbGRzXCI+XHJcbiAgICA8bGliLWkxOG4tZHluYW1pYy1mb3JtIFxyXG4gICAgW2Zvcm1Db25maWddPVwiZm9ybUNvbmZpZ3NcIiBcclxuICAgIFtmaWVsZHNdPVwiY29uZmlnLmlucHV0c0Zvcm1GaWVsZHNcIiBcclxuICAgIFtyb3dIZWlnaHRdPVwiY29uZmlnLmZvcm1Sb3dzSGVpZ2h0ID8/ICc0MHB4J1wiXHJcbiAgICBndXR0ZXJTaXplPVwiMWVtXCJcclxuICAgIFtjb2xzXT1cIjNcIlxyXG4gICAgI2Zvcm1cclxuICAgID48L2xpYi1pMThuLWR5bmFtaWMtZm9ybT5cclxuICAgIDxzcGFuPig8c3BhbiBjbGFzcz1cInJlZFwiPio8L3NwYW4+KSB7e1wiTEFCRUxTLkRBVE9TLU9CTElHQVRPUklPU1wiIHwgdHJhbnNsYXRlfX08L3NwYW4+XHJcbjwvZGl2PlxyXG5cclxuPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj5cclxuXHJcbiAgICA8YnV0dG9uIFxyXG4gICAgKm5nRm9yPVwibGV0IGIgb2YgY29uZmlnLmJ1dHRvbnNcIlxyXG4gICAgW25nQ2xhc3NdPVwie1xyXG4gICAgICAgICdtYXQtYnV0dG9uJzogYi50eXBlID09ICdiYXNpYycsXHJcbiAgICAgICAgJ21hdC1yYWlzZWQtYnV0dG9uJzogYi50eXBlID09ICdyYWlzZWQnLFxyXG4gICAgICAgICdtYXQtc3Ryb2tlZC1idXR0b24nOiBiLnR5cGUgPT0gJ3N0cm9rZWQnLFxyXG4gICAgICAgICdtYXQtZmxhdC1idXR0b24nOiBiLnR5cGUgPT0gJ2ZsYXQnXHJcbiAgICB9XCJcclxuICAgIG1hdC1idXR0b25cclxuICAgIGNvbG9yPVwicHJpbWFyeVwiIFxyXG4gICAgKGNsaWNrKT1cIm9uQ2xpY2soYi5sYWJlbEtleSEpXCIgXHJcbiAgICA+XHJcbiAgICAgICAge3sgY29uZmlnLmJ1dHRvbnNTa2lwVG9VcHBlcmNhc2VcclxuICAgICAgICAgICAgPyAoYi5sYWJlbEtleSEgfCB0cmFuc2xhdGU6Y29uZmlnLmJ1dHRvbnNQYXJhbXMpXHJcbiAgICAgICAgICAgIDogKGIubGFiZWxLZXkhIHwgdHJhbnNsYXRlOmNvbmZpZy5idXR0b25zUGFyYW1zKSB8IHVwcGVyY2FzZVxyXG4gICAgICAgIH19XHJcbiAgICA8L2J1dHRvbj5cclxuXHJcbjwvZGl2PlxyXG4iXX0=