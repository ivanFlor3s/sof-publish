import { Emptyfield, FormFieldConfig } from './interfaces';
import { Subscription } from 'rxjs';
import { FormBuilder, FormGroup } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class FormularioService {
    private fb;
    private http;
    private subs;
    constructor(fb: FormBuilder, http: HttpClient);
    buildFormGroup(fields: (FormFieldConfig | Emptyfield)[]): FormGroup;
    procesarAcciones(fields: FormFieldConfig[], field: FormFieldConfig, form: FormGroup): Subscription;
    realizarRequestToUrl(form: FormGroup, field: FormFieldConfig): void;
    private getFieldTargetFromFields;
    private procesarFillOptions;
    private procesarHide;
    private procesarShow;
    private procesarReset;
    private procesarDisable;
    private procesarEnable;
    private procesarSetValue;
    ngOnDestroy(): void;
    private setValidations;
    private setRequiredValidation;
    private setMinValidation;
    private setMaxValidation;
    private setMinLengthValidation;
    private setMaxLengthValidation;
    private setPatternValidation;
    private setMinDateValidation;
    private setMaxDateValidation;
    private setMaxFileSizeValidation;
    private setAcceptedTypesValidation;
    private setEmailValidation;
    private setFuncValidation;
    private setRequiredIfValidation;
    private setRequiredIfFieldIsEmptyValidation;
    private setRequiredIfFieldIsNotEmptyValidation;
    private setLessOrEqualToValidation;
    private setMoreOrEqualToValidation;
    private setAfterOrEqualToValidation;
    private setBeforeOrEqualToValidation;
    private checkTargetAndSubscribeToRefreshValidations;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormularioService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<FormularioService>;
}
